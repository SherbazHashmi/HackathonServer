# __init__ for osgeo package.

# making the osgeo package version the same as the gdal version:
from sys import version_info, path as syspath
from os.path import dirname, join, exists
from os import getenv, makedirs
if version_info >= (2,6,0):
    def swig_import_helper():
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gdal', [dirname(__file__)])
        except ImportError:
            import _gdal
            return _gdal
        if fp is not None:
            try:
                _mod = imp.load_module('_gdal', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gdal = swig_import_helper()
    del swig_import_helper
else:
    import _gdal

__version__ = _gdal.__version__ = _gdal.VersionInfo("RELEASE_NAME")
options = { 'GDAL_PAM_ENABLED': 'YES',
            'GDAL_CACHEMAX': '256',
            'GDAL_SWATH_SIZE': '20000000',
            'HFA_USE_RRD': 'YES',
            'SIMPLE_JPEG_MAGIC': 'YES',
            'GDAL_DISABLE_READDIR_ON_OPEN': 'YES',
            'COMPRESS_OVERVIEW': 'DEFLATE',
            'BIGTIFF_OVERVIEW': 'IF_SAFER',
            'GDAL_VALIDATE_CREATION_OPTIONS': 'NO',
            'TIFF_USE_OVR': 'YES',
            'GDAL_JP2K_ALT_OFFSETVECTOR_ORDER': 'YES',
            'JP2KAK_THREADS': '0',
            'GDAL_ECW_CACHE_MAXMEM': '67108864',
            'GDAL_SUBDATASET_ONE_STRING': 'YES',
            'GDAL_FILENAME_IS_UTF8': 'YES',
            'GDAL_HTTP_MAX_RETRY': '100',
            'GDAL_HTTP_RETRY_DELAY': '2',
            'GDAL_HTTP_VERSION': '2',
            'GDAL_HTTP_USE_CAPI_STORE': 'YES' }
for key, val in options.items():
    _gdal.SetConfigOption(key, _gdal.GetConfigOption(key, val))

for entry in syspath:
    if "\\ArcPy" in entry:
        gdaldata_dir = join(dirname(entry), r"pedata\gdaldata")
        _gdal.SetConfigOption('GDAL_DATA', _gdal.GetConfigOption('GDAL_DATA', gdaldata_dir))
        break

import errno
import winreg
fnf_exception = getattr(__builtins__,
                        'FileNotFoundError', WindowsError)
def proreg(reg_path, lookup_key, reverseCheck = False):
    """ Look up a specific Pro registry key, optionally returning
        the related hive instead of the value itself."""
    READ_ACCESS = (winreg.KEY_WOW64_64KEY + winreg.KEY_READ)
    root_keys = (
        ('HKCU', winreg.HKEY_CURRENT_USER),
        ('HKLM', winreg.HKEY_LOCAL_MACHINE)
    )
    ordered_root_keys = root_keys[::-1] if reverseCheck else root_keys
    for (key_name, root_key) in ordered_root_keys:
        try:
            key = winreg.OpenKey(root_key, reg_path, 0, READ_ACCESS)
        except fnf_exception as error:
            key = None
            if error.errno == errno.ENOENT:
                pass
            else:
                raise
        if key:
            try:
                raw_value = winreg.QueryValueEx(key, lookup_key)[0]
                if raw_value:
                        return raw_value
            except fnf_exception as error:
                if error.errno == errno.ENOENT:
                    pass
                else:
                    raise
    return None

proxyDir = proreg('Software\\ESRI\\ArcGISPro\\Raster\\Environment', 'TMPDIR', True)
if proxyDir is None:
    proxyDir = getenv('LOCALAPPDATA') + '\\ESRI\\rasterproxies'

if proxyDir is not None and _gdal.GetConfigOption('GDAL_PAM_PROXY_DIR') is None:
    if not exists(proxyDir):
        makedirs(proxyDir)
    _gdal.SetConfigOption('GDAL_PAM_PROXY_DIR', proxyDir)
